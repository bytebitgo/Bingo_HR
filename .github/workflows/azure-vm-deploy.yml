name: Azure VM Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure target directory exists on Azure VM
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AZURE_VM_HOST }} # moc
          username: ${{ secrets.AZURE_VM_USER }} # moc
          key: ${{ secrets.AZURE_VM_KEY }} # moc，私钥内容
          port: ${{ secrets.AZURE_VM_PORT }} # moc, 默认22
          script: |
            sudo -i mkdir -p /home/Bingo_HR
            sudo -i chown bingo:bingo /home/Bingo_HR

      - name: Generate systemd service file
        run: |
          echo '[Unit]' > bingo-flask.service
          echo 'Description=Bingo HR Flask Service' >> bingo-flask.service
          echo 'After=network.target' >> bingo-flask.service
          echo '' >> bingo-flask.service
          echo '[Service]' >> bingo-flask.service
          echo 'User=bingo' >> bingo-flask.service
          echo 'Group=bingo' >> bingo-flask.service
          echo 'WorkingDirectory=/home/Bingo_HR' >> bingo-flask.service
          echo 'Environment="PATH=/home/Bingo_HR/.venv/bin"' >> bingo-flask.service
          echo 'ExecStart=/home/Bingo_HR/.venv/bin/python /home/Bingo_HR/app.py' >> bingo-flask.service
          echo 'Restart=always' >> bingo-flask.service
          echo 'RestartSec=3' >> bingo-flask.service
          echo '' >> bingo-flask.service
          echo '[Install]' >> bingo-flask.service
          echo 'WantedBy=multi-user.target' >> bingo-flask.service

      - name: Copy files to Azure VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_VM_HOST }} # moc
          username: ${{ secrets.AZURE_VM_USER }} # moc
          key: ${{ secrets.AZURE_VM_KEY }} # moc，私钥内容
          port: ${{ secrets.AZURE_VM_PORT }} # moc, 默认22
          source: '.'
          target: '/home/Bingo_HR' # 可根据实际情况调整

      - name: SSH to Azure VM and restart Flask app
        uses: appleboy/ssh-action@v0.1.10
        env:
          RESET_DB: ${{ secrets.RESET_DB }}
        with:
          host: ${{ secrets.AZURE_VM_HOST }} # moc
          username: ${{ secrets.AZURE_VM_USER }} # moc
          key: ${{ secrets.AZURE_VM_KEY }} # moc，私钥内容
          port: ${{ secrets.AZURE_VM_PORT }} # moc, 默认22
          script: |
            echo "========== [CI] 步骤1：安装系统依赖 =========="
            sudo apt-get update && sudo apt-get install -y python3-venv

            echo "========== [CI] 步骤2：创建虚拟环境并安装依赖 =========="
            sudo -i bash -c "cd /home/Bingo_HR && python3 -m venv .venv && source .venv/bin/activate && pip install -r requirements.txt"

            echo "========== [CI] 步骤3：数据库重置判定 =========="
            RESET_DB="${{ secrets.RESET_DB }}"
            echo "[DEBUG] RESET_DB=[$RESET_DB], 长度=${#RESET_DB}"
            echo "[DEBUG] RESET_DB ASCII:"; echo -n "$RESET_DB" | od -c
            if [ "$RESET_DB" = "true" ]; then
              echo "[CI] RESET_DB=true，准备执行数据库重置..."
              sudo -i /home/Bingo_HR/.venv/bin/python /home/Bingo_HR/reset_db.py
              echo "[CI] reset_db.py 执行完毕。"
              sudo chown bingo:bingo /home/Bingo_HR/resume_matcher.db
            else
              echo "[CI] RESET_DB!=true，跳过数据库重置。"
            fi

            echo "========== [CI] 步骤4：部署 systemd 服务 =========="
            sudo sleep 3
            sudo \mv /home/Bingo_HR/bingo-flask.service /etc/systemd/system/bingo-flask.service
            sudo systemctl daemon-reload
            sudo systemctl enable bingo-flask
            sudo systemctl restart bingo-flask
            sudo systemctl status bingo-flask --no-pager

            echo "========== [CI] 步骤5：输出 Flask 日志 =========="
            sudo -i cat /home/Bingo_HR/app.log || true

      - name: Webhook通知部署成功
        if: success()
        run: |
          WORKFLOW_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          CHANGELOG="$(cat changelog.md)"
          python3 -c "import json,sys; msg=sys.argv[1]; url=sys.argv[2]; changelog=sys.argv[3]; commit=sys.argv[4]; print(json.dumps({'msg':msg,'url':url,'changelog':changelog,'commit':commit}, ensure_ascii=False))" \
            "Bingo HR 系统自动部署成功！" "$WORKFLOW_URL" "$CHANGELOG" "$COMMIT_MSG" > payload.json
          curl -X POST 'https://n8n.gslb.vip/webhook/bd887ed9-0149-4fca-bee0-55e50a026d87' \
            -H 'Content-Type: application/json' \
            -H "XAPIKEY: ${{ secrets.XAPIKEY }}" \
            -d @payload.json 